apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: app
  labels:
    app: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: docker.io/idanrachmany/movie2-backend:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5000


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: app
  labels:
    app: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: docker.io/idanrachmany/movie2-frontend:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000

---
apiVersion: v1
kind: Deployment
metadata:
  name: db-deployment
  namespace: app
  labels:
    app: db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
      - name: db
        image: postgres:15
        imagePullPolicy: IfNotPresent
        env:
        - name: POSTGRES_DB
          value: movie_db
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          value: postgres
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d/init.sql
          subPath: init.sql
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-script
      